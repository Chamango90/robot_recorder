#!/usr/bin/env python
import rospy
from sensor_msgs.msg import JointState

# Filter joint_states msg, if no joint_value changes more than threshold
# If one does, publish complete msg

threshold_default = 0.1
old_states = []

def publish(msg):
    global old_states
    old_states = msg.position
    pub.publish(msg)

def callback(msg):

    # Define old_states at start-up or if number of joints has changed
    if len(old_states) != len(msg.position):
        if old_states:
            rospy.logwarn("Number of joints changed!")
        rospy.loginfo("Throttling joint_states by change: \n %s", msg.name)
        return publish(msg)

    for idx, val in enumerate(msg.position):
        if (abs(old_states[idx] - val) > threshold):
            return publish(msg)

def throttle_by_distance():
    rospy.init_node('throttle_by_distance', anonymous=True)
    rospy.Subscriber("joint_states", JointState, callback)
    rospy.spin()

if __name__ == '__main__':
    argv = rospy.myargv()
    threshold = float(argv[1]) if len(argv) == 2 else threshold_default
    pub = rospy.Publisher('joint_states_changes', JointState, queue_size=10)
    throttle_by_distance()
